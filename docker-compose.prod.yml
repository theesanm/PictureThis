version: '3.8'

# Production Docker Compose for Cloud Deployment
# Use this file for production deployments on cloud platforms

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: picturethis_postgres_prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - picturethis_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: picturethis_backend_prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      JWT_SECRET: ${JWT_SECRET}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      PAYFAST_MERCHANT_ID: ${PAYFAST_MERCHANT_ID}
      PAYFAST_MERCHANT_KEY: ${PAYFAST_MERCHANT_KEY}
      PAYFAST_PASSPHRASE: ${PAYFAST_PASSPHRASE}
      PORT: 3011
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - picturethis_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3011/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
      replicas: 2

  # Frontend (Next.js)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: picturethis_frontend_prod
    restart: unless-stopped
    environment:
      NEXT_PUBLIC_API_URL: http://backend:3011/api
      NEXTAUTH_URL: ${NEXTAUTH_URL}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - picturethis_network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
      replicas: 2

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: picturethis_nginx_prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - picturethis_network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

volumes:
  postgres_data:
    driver: local

networks:
  picturethis_network:
    driver: bridge
