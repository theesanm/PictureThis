version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: picturethis_postgres
    restart: unless-stopped
    env_file:
      - ./.env.docker
    environment:
      POSTGRES_DB: ${DB_NAME:-picturethis}
      POSTGRES_USER: ${DB_USER:-picturethis_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-picturethis_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - picturethis_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-picturethis_user} -d ${DB_NAME:-picturethis}"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: picturethis_backend
    restart: unless-stopped
    env_file:
      - ./.env.docker
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST:-postgres}:${DB_PORT:-5432}/${DB_NAME}
      JWT_SECRET: ${JWT_SECRET:-your_jwt_secret_here_change_this_in_production}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      PAYFAST_MERCHANT_ID: ${PAYFAST_MERCHANT_ID:-}
      PAYFAST_MERCHANT_KEY: ${PAYFAST_MERCHANT_KEY:-}
      PAYFAST_PASSPHRASE: ${PAYFAST_PASSPHRASE:-}
      PORT: ${PORT:-3011}
    ports:
      - "3011:3011"
    depends_on:
      - postgres
    networks:
      - picturethis_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3011/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ./picfe
      dockerfile: Dockerfile
    container_name: picturethis_frontend
    restart: unless-stopped
    env_file:
      - ./.env.docker
    environment:
      # Inside docker-compose the frontend must talk to the backend service by name
      NEXT_PUBLIC_API_URL: "${NEXT_PUBLIC_API_URL:-http://backend:3011/api}"
      NEXTAUTH_URL: "${NEXTAUTH_URL:-http://localhost:3000}"
      NEXTAUTH_SECRET: "${NEXTAUTH_SECRET:-your_nextauth_secret_here}"
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - picturethis_network

  nginx:
    image: nginx:alpine
    container_name: picturethis_nginx
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - backend
    networks:
      - picturethis_network

volumes:
  postgres_data:

networks:
  picturethis_network:
    driver: bridge
